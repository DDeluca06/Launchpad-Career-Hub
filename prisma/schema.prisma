generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* -------------------------------------------------------------------------- */
/*                                 ENUM VALUES                                */
/* -------------------------------------------------------------------------- */
enum ProgramType {
  FOUNDATIONS
  ONE_ZERO_ONE
  LIFTOFF
  ALUMNI
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  APPRENTICESHIP
  INTERNSHIP
}

enum JobTag {
  FULLY_REMOTE
  HYBRID
  IN_PERSON
  FRONT_END
  BACK_END
  FULL_STACK
  NON_PROFIT
  START_UP
  EDUCATION
  HEALTHCARE
  FINTECH
  MARKETING
  DATA_SCIENCE
  CYBERSECURITY
  UX_UI_DESIGN
  IT
  PRODUCT_MANAGEMENT
  GAME_DEVELOPMENT
  AI_ML
  CLOUD_COMPUTING
  DEVOPS
  BUSINESS_ANALYSIS
  SOCIAL_MEDIA
}

enum ApplicationStatus {
  INTERESTED
  APPLIED
  REJECTED
  INTERVIEWING
  NEGOTIATING
  ACCEPTED
}

enum AppHistoryStatus {
  APPLIED
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}
/* -------------------------------------------------------------------------- */
/*                                 ENUM VALUES                                */
/* -------------------------------------------------------------------------- */

model app_status_history {
  app_history_id Int              @id @default(autoincrement())
  application_id Int
  status         AppHistoryStatus
  changed_at     DateTime?        @default(now()) @db.Timestamptz(6)
  applications   applications     @relation(fields: [application_id], references: [application_id], onDelete: Cascade, onUpdate: NoAction)
}

model applications {
  application_id     Int                  @id @default(autoincrement())
  user_id            Int
  job_id             Int
  status             ApplicationStatus
  applied_at         DateTime?            @default(now()) @db.Timestamptz(6)
  status_updated     DateTime?            @db.Timestamptz(6)
  resume_id          Int?
  position           String?
  app_status_history app_status_history[]
  jobs               jobs                 @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: NoAction)
  resumes            resumes?             @relation(fields: [resume_id], references: [resume_id], onUpdate: NoAction)
  users              users                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([application_id], map: "idx_applications_id")
}

model dashboard_activity {
  activity_id Int       @id @default(autoincrement())
  admin_id    Int
  action      String    @db.VarChar
  details     String?
  timestamp   DateTime? @default(now()) @db.Timestamptz(6)
  users       users     @relation(fields: [admin_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model events {
  event_id    Int       @id @default(autoincrement())
  title       String    @db.VarChar
  description String?
  event_date  DateTime  @db.Date
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model jobs {
  job_id       Int            @id @default(autoincrement())
  job_type     JobType
  title        String         @db.VarChar
  description  String?
  company      String         @db.VarChar
  website      String?        @db.VarChar
  location     String?        @db.VarChar
  partner_id   Int?
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  archived     Boolean        @default(false)
  tags         JobTag[]
  applications applications[]
  partners     partners?      @relation(fields: [partner_id], references: [partner_id], onUpdate: NoAction)

  @@index([job_id], map: "idx_jobs_job_id")
  @@index([title], map: "idx_jobs_title")
}

model partners {
  partner_id       Int     @id @default(autoincrement())
  name             String  @db.VarChar
  description      String?
  industry         String? @db.VarChar
  location         String? @db.VarChar
  jobs_available   Int?    @default(0)
  applicants       Int?    @default(0)
  applicants_hired Int?    @default(0)
  jobs             jobs[]
}

model resumes {
  resume_id    Int            @id @default(autoincrement())
  user_id      Int
  file_path    String         @db.VarChar
  file_name    String         @db.VarChar
  is_default   Boolean?       @default(false)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  applications applications[]
  users        users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([resume_id], map: "idx_resumes_resume_id")
}

model users {
  user_id            Int                  @id @default(autoincrement())
  is_active          Boolean              @default(true)
  username           String               @db.VarChar
  first_name         String               @db.VarChar
  last_name          String               @db.VarChar
  password_hash      String               @db.VarChar
  is_admin           Boolean?             @default(false)
  program            ProgramType?
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  applications       applications[]
  dashboard_activity dashboard_activity[]
  resumes            resumes[]

  @@index([user_id], map: "idx_users_user_id")
}
