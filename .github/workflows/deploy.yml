name: Deploy Next.js App

on:
  push:
    branches:
      - main  # Runs when pushing to the main branch
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Next.js app
        run: pnpm build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: |
            .next
            package.json
            pnpm-lock.yaml
            ecosystem.config.js
            next.config.js
            public

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure build job completes successfully first
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build         # Name of the artifact to download
          path: ./deploy           # Destination directory for downloaded artifact

      # Verify that the essential .next directory exists after download
      - name: Verify downloaded artifacts
        run: |
          ls -la ./deploy
          if [ ! -d "./deploy/.next" ]; then
            echo "Error: .next directory not found in downloaded artifacts"
            exit 1
          fi

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add server's host key to known_hosts to avoid interactive prompt
          # Consider adding this line if you encounter host key verification issues:
          # ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts 
          # Alternatively, configure SSH to ignore host key checking (less secure):
          # ssh -o StrictHostKeyChecking=no ...

          # Copy files from the download directory to the server
          scp -o StrictHostKeyChecking=no -r ./deploy/.next ./deploy/package.json ./deploy/pnpm-lock.yaml ./deploy/ecosystem.config.js ./deploy/next.config.js ./deploy/public $SERVER_USER@$SERVER_HOST:$SERVER_PATH/
          
          # Execute commands on the remote server
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "cd $SERVER_PATH && \
            echo 'Installing pnpm on server...' && \
            curl -f https://get.pnpm.io/v6.js | node - add --global pnpm && \
            echo 'Installing production dependencies...' && \
            pnpm install --prod --frozen-lockfile && \
            echo 'Restarting application with PM2...' && \
            pm2 delete next-app || true && \
            pm2 start ecosystem.config.js && \
            pm2 save && \
            echo 'Deployment successful!'"
